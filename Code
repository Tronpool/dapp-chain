@@ -279,11 +279,12 @@ contract MainChainGateway is OracleManagerContract {

    function retryDeposit(uint256 nonce) payable public goDelegateCall onlyNotStop onlyNotPause isHuman {
        require(msg.value >= retryFee, "msg.value need  >= retryFee");
        require(nonce >= nonceBaseValue, "nonce should not < nonceBaseValue");
        require(nonce < nonceBaseValue + userDepositList.length, "nonce >= nonceBaseValue + userDepositList.length");
        if (msg.value > retryFee) {
            msg.sender.transfer(msg.value - retryFee);
        }
        bonus += retryFee;
        require(nonce < nonceBaseValue + userDepositList.length, "nonce >= nonceBaseValue + userDepositList.length");
        DepositMsg storage depositMsg = userDepositList[nonce - nonceBaseValue];
        // TRX,    // 0
        // TRC10,  // 1
@@ -302,11 +303,12 @@ contract MainChainGateway is OracleManagerContract {

    function retryMapping(uint256 nonce) payable public goDelegateCall onlyNotStop onlyNotPause isHuman {
        require(msg.value >= retryFee, "msg.value need  >= retryFee");
        require(nonce >= nonceBaseValue, "nonce should not < nonceBaseValue");
        require(nonce < nonceBaseValue + userMappingList.length, "nonce >= nonceBaseValue + userMappingList.length");
        if (msg.value > retryFee) {
            msg.sender.transfer(msg.value - retryFee);
        }
        bonus += retryFee;
        require(nonce < nonceBaseValue + userMappingList.length, "nonce >= nonceBaseValue + userMappingList.length");
        MappingMsg storage mappingMsg = userMappingList[nonce - nonceBaseValue];
        require(mappingMsg.status == DataModel.Status.SUCCESS, "mappingMsg.status != SUCCESS ");

@@ -352,6 +354,16 @@ contract MainChainGateway is OracleManagerContract {
        return TRC20(contractAddress).balanceOf(address(this));
    }

    function getBonus() external view returns(uint256) {
        // TODO: 
        // Changed in next version to make it recursively as:
        // MainChainGateway(refGatewayAddress).getBonus() + bonus
        if(refGatewayAddress == address(0)) 
            return bonus;
        else 
            return MainChainGateway(refGatewayAddress).bonus() + bonus;
    }

    // Returns TRC721 token by uid
    function hasNFT(uint256 uid, address contractAddress) external view returns (bool) {
        return TRC721(contractAddress).ownerOf(uid) == address(this);
  16  
dapp-chain/contract/v1.0.3/mainChain/MainChainGateway.sol
@@ -279,11 +279,12 @@ contract MainChainGateway is OracleManagerContract {

    function retryDeposit(uint256 nonce) payable public goDelegateCall onlyNotStop onlyNotPause isHuman {
        require(msg.value >= retryFee, "msg.value need  >= retryFee");
        require(nonce >= nonceBaseValue, "nonce should not < nonceBaseValue");
        require(nonce < nonceBaseValue + userDepositList.length, "nonce >= nonceBaseValue + userDepositList.length");
        if (msg.value > retryFee) {
            msg.sender.transfer(msg.value - retryFee);
        }
        bonus += retryFee;
        require(nonce < nonceBaseValue + userDepositList.length, "nonce >= nonceBaseValue + userDepositList.length");
        DepositMsg storage depositMsg = userDepositList[nonce - nonceBaseValue];
        // TRX,    // 0
        // TRC10,  // 1
@@ -302,11 +303,12 @@ contract MainChainGateway is OracleManagerContract {

    function retryMapping(uint256 nonce) payable public goDelegateCall onlyNotStop onlyNotPause isHuman {
        require(msg.value >= retryFee, "msg.value need  >= retryFee");
        require(nonce >= nonceBaseValue, "nonce should not < nonceBaseValue");
        require(nonce < nonceBaseValue + userMappingList.length, "nonce >= nonceBaseValue + userMappingList.length");
        if (msg.value > retryFee) {
            msg.sender.transfer(msg.value - retryFee);
        }
        bonus += retryFee;
        require(nonce < nonceBaseValue + userMappingList.length, "nonce >= nonceBaseValue + userMappingList.length");
        MappingMsg storage mappingMsg = userMappingList[nonce - nonceBaseValue];
        require(mappingMsg.status == DataModel.Status.SUCCESS, "mappingMsg.status != SUCCESS ");

@@ -352,6 +354,16 @@ contract MainChainGateway is OracleManagerContract {
        return TRC20(contractAddress).balanceOf(address(this));
    }

    function getBonus() external view returns(uint256) {
        // TODO: 
        // Changed in next version to make it recursively as:
        // MainChainGateway(refGatewayAddress).getBonus() + bonus
        if(refGatewayAddress == address(0)) 
            return bonus;
        else 
            return MainChainGateway(refGatewayAddress).bonus() + bonus;
    }

    // Returns TRC721 token by uid
    function hasNFT(uint256 uid, address contractAddress) external view returns (bool) {
        return TRC721(contractAddress).ownerOf(uid) == address(this);
